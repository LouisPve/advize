{
  "compilerOptions": {
    "target": "ES2020" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "DOM",
      "ES2020"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "module": "ES2020" /* Specify what module code is generated. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "typeRoots": [
      "./node_modules/@types/",
      "src/tools/types"
    ] /* Specify multiple folders that act like `./node_modules/@types`. */,
    "types": [
      "node",
      "jest"
    ] /* Specify type package names to be included without being referenced in a source file. */,
    "noErrorTruncation": true,
    "pretty": true,
    "outDir": "./dist/",
    "isolatedModules": false,
    "resolveJsonModule": true /* Enable importing .json files */,
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": true /* Create sourcemaps for d.ts files. */,
    "sourceMap": false /* Create source map files for emitted JavaScript files. */,
    "inlineSourceMap": true /* Include sourcemap files inside the emitted JavaScript. */,
    "inlineSources": true /* Include source code in the sourcemaps inside the emitted JavaScript. */,
    "removeComments": true /* Disable emitting comments. */,
    "importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": false /* Enable all strict type-checking options. */,
    "alwaysStrict": false /* Ensure 'use strict' is always emitted. */,
    "strictNullChecks": false /* When type checking, take into account `null` and `undefined`. */,
    "strictFunctionTypes": false /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": false /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
    "strictPropertyInitialization": false /* Check for class properties that are declared but not set in the constructor. */,
    "exactOptionalPropertyTypes": false /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitOverride": false /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "noImplicitAny": false /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "noImplicitThis": false /* Enable error reporting when `this` is given the type `any`. */,
    "noImplicitReturns": false /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "useUnknownInCatchVariables": false /* Type catch clause variables as 'unknown' instead of 'any'. */,
    "noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": false /* Raise an error when a function parameter isn't read */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */,
    "noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
    "keyofStringsOnly": false /* Make keyof only return strings instead of string, numbers or symbols. Legacy option. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */,
    "skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
    "noEmitOnError": true,
    "allowJs": true,
    "checkJs": true,
    "disableSourceOfProjectReferenceRedirect": true,
    "noUncheckedSideEffectImports": true,
    //"baseUrl": "./src",
    "rootDir": "./src/",
    "sourceRoot": "./src/"
  },
  "include": ["./src/**/*"],
  "exclude": ["./dist/**/*", "node_modules/**/*"]
}
